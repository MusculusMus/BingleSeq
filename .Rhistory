startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
?shinyDirChoose
devtools::load_all(".")
?shinyDirChoose
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
library(BingleSeq)
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
BingleSeq::startBingleSeq()
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
library(EnsDb.Hsapiens.v86)
library(viper)
#-------
# 2. Run Dorothea as in Dorothea (obtain NES from filtered and filtered gene counts matrix)
rm(list = ls())
setwd("C:/.PhD/test_our_tools")
# get dorothea data
# acessing (human) dorothea regulons
# for mouse regulons: data(dorothea_mm, package = "dorothea")
data(dorothea_hs, package = "dorothea")
regulons = dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B", "C"))
# convert ENS to Symbols
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v86, keys=de_data$X,
keytype = "GENEID", columns = c("SYMBOL","GENEID"))
# Change from ENS to Symb
library(org.Hs.eg.db)
org.Hs.eg.db
keys(org.Hs.eg.db)
geneIDs1 <- ensembldb::select(org.Hs.eg.db, keys=de_data$X,
keytype = "GENEID", columns = c("SYMBOL","GENEID"))
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db, keys=de_data$X,
keytype = "GENEID", columns = c("SYMBOL","GENEID"))
# Change from ENS to Symb
keytypes(org.Hs.eg.db)
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db, keys=de_data$X,
keytype = "UNIGENE", columns = c("SYMBOL","GENEID"))
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db, keys=de_data$X,
keytype = "UNIGENE", columns = c("SYMBOL","UNIGENE"))
startBingleSeq()
library(c)
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
library(BingleSeq)
devtools::load_all(".")
library(BingleSeq)
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
setwd("~/PhD/test_our_tools")
setwd("~/PhD/")
list.files()
list.files()
de_data <- read.csv("test_data/de_results_limma.csv")
head(de_data)
library(progeny)
library(dorothea)
library(tibble)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(readr)
#' Gene type converter function
#'
#' @param de_data Table with de results
#' @param input_type input gene type e.g. ENSEMBL
#' @param output_type output gene type e.g. Symbol
#' @export
#' @return Returns a df with gene names convert to symbols
convert_gene_type <- function(de_data, input_type, output_type) {
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db,
keys=de_data$X,
keytype = input_type,
columns = c(output_type, input_type))
geneIDs1 <- subset(geneIDs1, (!duplicated(geneIDs1[[output_type]])))
geneIDs1 <- subset(geneIDs1, !is.na(geneIDs1[[output_type]]))
data_me <- merge(de_data, geneIDs1, by.x = "X", by.y = input_type)
data_me$X <- data_me[[output_type]]
data_me <- within(data_me, rm(list=sub("[.]test","",output_type)))
return(data_me)
}
de_data <- convert_gene_type(de_data, "ENSEMBL", "SYMBOL")
head(de_data)
head(de_data)
Normalised_counts_matrix <- de_data[0:6,] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "gene") %>%
as.matrix()
Normalised_counts_matrix <- de_data[0:6,] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
ttop_KOvsWT_matrix <- de_data[0:6,] %>%
dplyr::select(ID, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "ID") %>%
as.matrix()
ttop_KOvsWT_matrix <- de_data[0:6,] %>%
dplyr::select(ID, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(Normalised_counts_matrix)
ttop_KOvsWT_matrix <- de_data[0:6,] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
de_results_matrix <- de_data[0:6,] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(de_results_matrix)
de_data <- read.csv("test_data/de_results_limma.csv")
# convert ENSEMBL to SYMBOL
de_data <- convert_gene_type(de_data, "ENSEMBL", "SYMBOL")
head(de_data)
normalised_counts_matrix <- de_data[0:6,] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
head(normalised_counts_matrix)
de_results_matrix <- de_data[0:6,] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(de_results_matrix)
normalised_counts_matrix <- de_data[6:,] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
normalised_counts_matrix <- de_data[6:ncol(de_data),] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
head(normalised_counts_matrix)
normalised_counts_matrix <- de_data[6:ncol(de_data),] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
head(normalised_counts_matrix)
de_results_matrix <- de_data[0:6,] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(de_results_matrix)
normalised_counts_matrix <- de_data[6:ncol(de_data),] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
head(normalised_counts_matrix)
head(de_data)
normalised_counts_matrix <- de_data[,6:ncol(de_data)] %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
normalised_counts <- de_data[,6:ncol(de_data)]
normalised_counts$gene <- de_data$gene
normalised_counts <- de_data[,6:ncol(de_data)]
normalised_counts$gene <- de_data$X
normalised_counts_matrix <- normalised_counts %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
normalised_counts <- de_data[,6:ncol(de_data)]
normalised_counts <- de_data[,6:ncol(de_data)]
normalised_counts$X <- de_data$X
head(normalised_counts)
# get normalised counts matrix
normalised_counts <- de_data[,6:ncol(de_data)]
normalised_counts$X <- de_data$X
head(normalised_counts)
normalised_counts_matrix <- normalised_counts %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
head(normalised_counts_matrix)
de_results_matrix <- de_data[0:6,] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(de_results_matrix)
PathwayActivity_counts <- progeny(Normalised_counts_matrix, scale=TRUE,
organism="Human", top = 100)
PathwayActivity_counts <- progeny(normalised_counts_matrix, scale=TRUE,
organism="Human", top = 100)
Activity_counts <- as.vector(PathwayActivity_counts)
pathwayActivity_counts <- progeny(normalised_counts_matrix, scale=TRUE,
organism="Human", top = 100)
activity_counts <- as.vector(PathwayActivity_counts)
head(activity_counts)
paletteLength <- 100
myColor <-
colorRampPalette(c("darkblue", "whitesmoke","indianred"))(paletteLength)
progenyBreaks <- c(seq(min(Activity_counts), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(Activity_counts)/paletteLength,
max(Activity_counts),
length.out=floor(paletteLength/2)))
progeny_hmap <- pheatmap(t(PathwayActivity_counts),fontsize=14,
fontsize_row = 10, fontsize_col = 10,
color=myColor, breaks = progenyBreaks,
main = "PROGENy (100)", angle_col = 45,
treeheight_col = 0,  border_color = NA)
#' Gene type converter function
#'
#' @param de_data Table with de results
#' @param input_type input gene type e.g. ENSEMBL
#' @param output_type output gene type e.g. Symbol
#' @export
#' @return Returns a df with gene names convert to symbols
convert_gene_type <- function(de_data, input_type, output_type, gene_column="X") {
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db,
keys=de_data$X,
keytype = input_type,
columns = c(output_type, input_type))
geneIDs1 <- subset(geneIDs1, (!duplicated(geneIDs1[[output_type]])))
geneIDs1 <- subset(geneIDs1, !is.na(geneIDs1[[output_type]]))
data_me <- merge(de_data, geneIDs1, by.x = "X", by.y = input_type)
data_me$X <- data_me[[output_type]]
data_me <- within(data_me, rm(list=sub("[.]test","",output_type)))
return(data_me)
}
#' Gene type converter function
#'
#' @param de_data Table with de results
#' @param input_type input gene type e.g. ENSEMBL
#' @param output_type output gene type e.g. Symbol
#' @export
#' @return Returns a df with gene names convert to symbols
convert_gene_type <- function(de_data, input_type, output_type, gene_column="X") {
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db,
keys=de_data$X,
keytype = input_type,
columns = c(output_type, input_type))
geneIDs1 <- subset(geneIDs1, (!duplicated(geneIDs1[[output_type]])))
geneIDs1 <- subset(geneIDs1, !is.na(geneIDs1[[output_type]]))
data_me <- merge(de_data, geneIDs1, by.x = gene_column, by.y = input_type)
data_me$X <- data_me[[output_type]]
data_me <- within(data_me, rm(list=sub("[.]test","",output_type)))
return(data_me)
}
PathwayActivity_zscore <- progeny(de_results_matrix,
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE) %>%
t()
# convert ENSEMBL to SYMBOL
de_data <- convert_gene_type(de_data, "ENSEMBL", "SYMBOL")
head(de_data)
# get normalised counts matrix
normalised_counts <- de_data[,6:ncol(de_data)]
normalised_counts$X <- de_data$X
head(normalised_counts)
normalised_counts_matrix <- normalised_counts %>%
dplyr::mutate_if(~ any(is.na(.x)),~ if_else(is.na(.x),0,.x)) %>%
tibble::column_to_rownames(var = "X") %>%
as.matrix()
head(normalised_counts_matrix)
de_results_matrix <- de_data[0:6,] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(de_results_matrix)
PathwayActivity_zscore <- progeny(de_results_matrix,
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE) %>%
t()
View(de_results_matrix)
de_results_matrix <- de_data[,0:6] %>%
dplyr::select(X, t) %>%
dplyr::filter(!is.na(t)) %>%
column_to_rownames(var = "X") %>%
as.matrix()
head(de_results_matrix)
View(de_results_matrix)
PathwayActivity_zscore <- progeny(de_results_matrix,
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE) %>%
t()
colnames(PathwayActivity_zscore) <- "NES"
pathwayActivity_zscore <- progeny(de_results_matrix,
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE) %>%
t()
colnames(PathwayActivity_zscore) <- "NES"
head(pathwayActivity_zscore)
pathwayActivity_zscore_df <- as.data.frame(pathwayActivity_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
colnames(PathwayActivity_zscore) <- "NES"
head(pathwayActivity_zscore)
pathwayActivity_zscore_df <- as.data.frame(pathwayActivity_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
colnames(pathwayActivity_zscore) <- "NES"
head(pathwayActivity_zscore)
pathwayActivity_zscore_df <- as.data.frame(pathwayActivity_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
ggplot(PathwayActivity_zscore_df,aes(x = reorder(Pathway, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Pathways")
ggplot(pathwayActivity_zscore_df,aes(x = reorder(Pathway, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Pathways")
prog_matrix <- getModel("Human", top=100) %>%
as.data.frame()  %>%
tibble::rownames_to_column("GeneID")
head(prog_matrix)
ttop_results <- de_results_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("GeneID")
scat_plots <- progeny::progenyScatter(df = ttop_results,
weight_matrix = prog_matrix,
statName = "t_values", verbose = FALSE)
plot(scat_plots[[1]]$`JAK-STAT`)
scat_plots <- progeny::progenyScatter(df = ttop_results,
weight_matrix = prog_matrix,
statName = "t_values", verbose = FALSE)
plot(scat_plots[[1]]$MAPK)
plot(scat_plots[[1]]$`JAK-STAT`)
plot(scat_plots[[1]]$EGFR)
plot(scat_plots[[1]]$p53)
plot(scat_plots[[1]][["p53"]])
plot(scat_plots[[1]][["JAK-STAT"]])
plot(scat_plots[[1]][[x_pathway]])
x_pathway = "p53"
plot(scat_plots[[1]][[x_pathway]])
devtools::load_all("~/Repos/BingleSeq")
devtools::load_all("~/Repos/BingleSeq")
devtools::load_all("~/Repos/BingleSeq")
startBingleSeq()
library(BingleSeq)
devtools::load_all("~/Repos/BingleSeq")
library(BingleSeq)
startBingleSeq()
startBingleSeq()
ls("package:org.Mm.eg.db")
devtools::load_all("~/Repos/BingleSeq")
ls("package:org.Mm.eg.db")
startBingleSeq()
AnnotationDbi::select(org.Mm.eg.db)
AnnotationDbi::keys(org.Mm.eg.db)
AnnotationDbi::columns(org.Mm.eg.db)
AnnotationDbi::select(org.Mm.eg.db)
AnnotationDbi::select(org.Mm.eg.db)
AnnotationDbi::select(org.Mm.eg.db, columns = "ENSEMBL")
AnnotationDbi::select(org.Mm.eg.db, keys = , columns = c("ENSEMBL", "SYMBOL"))
AnnotationDbi::select(org.Mm.eg.db, keys = , columns = c("ENSEMBL", "SYMBOL"))
head(keys(org.Mm.eg.db))
head(keys(org.Mm.eg.db, keytype = "ENSEMBL"))
head(keys(org.Mm.eg.db, keytype = c("ENSEMBL", "SYMBOL")))
head(keys(org.Mm.eg.db, keytype = c("ENSEMBL"))
)
head(keys(org.Mm.eg.db, keytype = c("ENSEMBL")))
keys <- keys(org.Mm.eg.db, keytype = c("ENSEMBL"))
keys <- keys(org.Mm.eg.db, keytype = c("ENSEMBL"))
keys
AnnotationDbi::select(org.Mm.eg.db, keys = keys, columns = c("ENSEMBL", "SYMBOL"))
AnnotationDbi::select(org.Mm.eg.db, keys = keys, keytype = "ENSEMBL", columns = c("ENSEMBL", "SYMBOL"))
AnnotationDbi::select(org.Mm.eg.db, keys = keys, keytype = "ENSEMBL", columns = c("ENSEMBL", "SYMBOL"))
AnnotationDbi::select(org.Mm.eg.db, keys = keys, keytype = "ENSEMBL", columns = c("ENSEMBL", "SYMBOL"))
AnnotationDbi::columns(org.Mm.eg.db, keys = keys)
AnnotationDbi::columns(org.Mm.eg.db)
AnnotationDbi::keys(org.Mm.eg.db)
AnnotationDbi::keys(org.Mm.eg.db)
AnnotationDbi::columns(org.Mm.eg.db, keys = keys)
devtools::load_all("~/Repos/BingleSeq")
startBingleSeq()
AnnotationDbi::select(Mm, keys = f_peakAnno_mappings$Genes, columns = c("ENTREZID", "SYMBOL"), keytype = "ENTREZID")
AnnotationDbi::select(org.Mm.eg.db, keys = f_peakAnno_mappings$Genes, columns = c("ENTREZID", "SYMBOL"), keytype = "ENTREZID")
devtools::load_all("~/Repos/BingleSeq")
AnnotationDbi::select(org.Mm.eg.db, keys = f_peakAnno_mappings$Genes, columns = c("ENTREZID", "SYMBOL"), keytype = "ENTREZID")
startBingleSeq()
devtools::load_all("~/Repos/BingleSeq")
startBingleSeq()
startBingleSeq()
devtools::load_all("~/Repos/BingleSeq")
startBingleSeq()
source('~/Repos/BingleSeq/R/startApp.R')
devtools::load_all("~/Repos/BingleSeq")
source('~/Repos/BingleSeq/R/startApp.R')
startBingleSeq()
startBingleSeq()
devtools::load_all("~/Repos/BingleSeq")
startBingleSeq()
devtools::load_all("~/Repos/BingleSeq")
startBingleSeq()
