citation("limma")
library(BingleSeq)
startBingleSeq()
startBingleSeq()
startBingleSeq()
cite(GO.db)
referemce(GO.db)
reference(GO.db)
cite(limma)
citation(GO.db)
citation(GO.db)
citation("limma")
citation("GO.db")
citation("org.Hs.eg.db")
citation("Harman")
citation("Harman")
citation("ComBat")
citation("sva")
startstartBingleSeq()
startstartBingleSeq()
library(BingleSeq)
startBingleSeq()
pwd
cd
ls
wd
getwd()
setwd("C:\Repos\BingleSeq\BingleSeq")
setwd(C:\Repos\BingleSeq\BingleSeq)
setwd("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq
startBingleSeq()
library(BingleSeq)
startBingleSeq()
library(BingleSeq)
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
library(BingleSeq)
devtools::load_all(".")
startBingleSeq()
startBin
startBingleSeq()
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)
startBingleSeq()
startBingleSeq()
startBingleSeq()
sessionInfo()
sessionInfo()
devtools::load_all(".")
warnings()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
startBingleSeq()
library(BingleSeq)
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)
devtools::load_all(".")
system.file("extdata", "m_ifn.csv", package = "BingleSeq")
data_x <- system.file("extdata", "m_ifn.csv", package = "BingleSeq")
data
data_x <- read.csv(system.file("extdata", "m_ifn.csv", package = "BingleSeq"))
ta
head(data)
system.file("extdata", "m_ifn.csv", package = "BingleSeq")
x <- system.file("extdata", "m_ifn.csv", package = "BingleSeq")
x
data_x <- read.csv(x
)
data_x
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)\
devtools::load_all(".")
startBingleSeq()
roxygen2::load_options()
roxygen2::roxygenize()
devtools::load_all(".")
roxygen2::roxygenize()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
library(BingleSeq)
roxygen2::roxygenize()
devtools::load_all(".")
setwd("C:\Users\Daniel\Downloads\")
setwd("\Users\Daniel\Downloads\")
setwd("Users\Daniel\Downloads\")
setwd("C:/Users/Daniel/Downloads/")
setwd("C:/Repos/BingleSeq/")
devtools::load_all("BingleSeq")
devtools::load_all("BingleSeq")
library(BingleSeq)
library(BingleSeq)
install.packages("rlang")
devtools::load_all(".")
rlang:last_error()
rlang::last_error()
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
library(BingleSeq)
startBingleSeq()
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)
startBingleSeq()
getwd()
startBingleSeq()
startBingleSeq()
shinyFiles::shinyFilesExample()
devtools::load_all("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq()
remotes::install_github("thomasp85/shinyFiles")
startBingleSeq()
devtools::load_all("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq()
remotes::install_github("thomasp85/shinyFiles")
shinyFiles::shinyFilesExample()
devtools::load_all("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq()
startBingleSeq()
shinyFiles::shinyFilesExample()
devtools::load_all("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq()
devtools::load_all("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq()
devtools::load_all("C:/Repos/BingleSeq/BingleSeq")
startBingleSeq()
install.packages("shinyFiles", repos = "https://radiant-rstats.github.io/minicran/")
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
library(BingleSeq)
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
?shinyDirChoose
devtools::load_all(".")
?shinyDirChoose
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
library(BingleSeq)
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
BingleSeq::startBingleSeq()
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
devtools::load_all(".")
BingleSeq::startBingleSeq()
library(EnsDb.Hsapiens.v86)
library(viper)
#-------
# 2. Run Dorothea as in Dorothea (obtain NES from filtered and filtered gene counts matrix)
rm(list = ls())
setwd("C:/.PhD/test_our_tools")
# get dorothea data
# acessing (human) dorothea regulons
# for mouse regulons: data(dorothea_mm, package = "dorothea")
data(dorothea_hs, package = "dorothea")
regulons = dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B", "C"))
# convert ENS to Symbols
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v86, keys=de_data$X,
keytype = "GENEID", columns = c("SYMBOL","GENEID"))
# Change from ENS to Symb
library(org.Hs.eg.db)
org.Hs.eg.db
keys(org.Hs.eg.db)
geneIDs1 <- ensembldb::select(org.Hs.eg.db, keys=de_data$X,
keytype = "GENEID", columns = c("SYMBOL","GENEID"))
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db, keys=de_data$X,
keytype = "GENEID", columns = c("SYMBOL","GENEID"))
# Change from ENS to Symb
keytypes(org.Hs.eg.db)
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db, keys=de_data$X,
keytype = "UNIGENE", columns = c("SYMBOL","GENEID"))
geneIDs1 <- AnnotationDbi::select(org.Hs.eg.db, keys=de_data$X,
keytype = "UNIGENE", columns = c("SYMBOL","UNIGENE"))
startBingleSeq()
library(c)
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
devtools::load_all(".")
library(BingleSeq)
devtools::load_all(".")
library(BingleSeq)
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
