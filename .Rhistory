}
colnames(CR)=colnames(X)
toc = proc.time()[3]
eltime=toc-tic
return(list(Consensus=CR, Tau=Taux, Eltime=eltime) )
}
head(edgeR_data)
?rank
edgeR_data <- edgeR_data[order(edgeR_data$FDR), ]
edgeR_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_EdgeR_deResults.csv")
edgeR_ord <- edgeR_data[order(edgeR_data$FDR), ]
head(edgeR_ord)
head(edgeR_data)
head(edgeR_ord)
# order the data
edgeR_ord <- edgeR_data[order(edgeR_data$FDR), ]
limma_ord <- limma_data[order(limma_data$FDR), ]
DESeq_ord <- DESeq_data[order(DESeq_data$FDR), ]
head(limma_ord)
head(DESeq_ord)
head(limma_data, n = 20)
head(limma_ord, n = 20)
x1 <- as.vector(edgeR_ord$FDR)
names(x1) <- row.names(edgeR_ord)
x1
# Load the data
edgeR_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_EdgeR_deResults.csv", row.names = 1)
# Load the data
edgeR_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_EdgeR_deResults.csv")
limma_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_limma_deResults.csv")
DESeq_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_DESeq2_deResults.csv")
names(x1) <- edgeR_ord$X
x1
rank(x1)
x1_ranked <- rank(x1)
x1_ranked
head(x1_ranked)
head(edgeR_ord)
head(edgeR_ord, n = 10)
head(edgeR_data, n = 10)
head(edgeR_ord, n = 10)
head(x1_ranked, n = 10)
head(edgeR_ord, n = 10)
tail(x1_ranked)
x2 <- as.vector(limma_ord$FDR) # produce ranks
names(x2) <- limma_ord$X # assign names
x3 <- as.vector(DESeq_ord$FDR) # produce ranks
names(x3) <- DESeq_ord$X # assign names
rank(x1)
x3 <- as.vector(DESeq_ord$FDR) # produce ranks
names(x3) <- DESeq_ord$X # assign names
x3_ranked <- rank(x3)
x1 <- as.vector(edgeR_ord$FDR) # produce ranks
names(x1) <- edgeR_ord$X # assign names
x1_ranked <- rank(x1)
x1_ranked <- rank(x1)
x2 <- as.vector(limma_ord$FDR) # produce ranks
names(x2) <- limma_ord$X # assign names
x2_ranked <- rank(x2)
x3 <- as.vector(DESeq_ord$FDR) # produce ranks
names(x3) <- DESeq_ord$X # assign names
x3_ranked <- rank(x3)
x3_ranked <- rank(x3)
x1 <- as.vector(edgeR_ord$FDR) # produce ranks
names(x1) <- edgeR_ord$X # assign names
x1_ranked <- rank(x1)
x2 <- as.vector(limma_ord$FDR) # produce ranks
names(x2) <- limma_ord$X # assign names
x2_ranked <- rank(x2)
x3 <- as.vector(DESeq_ord$FDR) # produce ranks
names(x3) <- DESeq_ord$X # assign names
x3 <- as.vector(DESeq_ord$FDR) # produce ranks
x3_ranked <- rank(x3)
x3 <- as.vector(DESeq_ord$FDR) # produce ranks
names(x3) <- DESeq_ord$X # assign names
x3_ranked <- rank(x3)
head(x1_ranked)
head(x2_ranked)
head(x3_ranked)
sum(x1, x2, x3)
#
order(x1)
#
order(names(x1))
#
cbind(x1,x2,x3)
#
cbind(x1_ranked,x2_ranked,x3_ranked)
# combine the vectors into a
list <- cbind(x1_ranked,x2_ranked,x3_ranked)
# combine the vectors into a
rm(list) <- cbind(x1_ranked,x2_ranked,x3_ranked)
# combine the vectors into a
remove(list) <- cbind(x1_ranked,x2_ranked,x3_ranked)
# combine the vectors into a
remove(list)# <- cbind(x1_ranked,x2_ranked,x3_ranked)
# combine the vectors into a
xlist <- cbind(x1_ranked,x2_ranked,x3_ranked)
is.list(xlist)
# combine the vectors into a
xlist <- as.list(cbind(x1_ranked,x2_ranked,x3_ranked))
is.list(xlist)
xlist
# combine the vectors into a
xdf <- (cbind(x1_ranked,x2_ranked,x3_ranked))
class(xdf)
xdf
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
class(xdf)
xdf
xdf$consensus <- sum(xdf$x1_ranked, xdf$x2_ranked, xdf$x3_ranked)
xdf$consensus
View(xdf)
xdf$consensus <- rowSums(xdf$x1_ranked, xdf$x2_ranked, xdf$x3_ranked)
xdf$consensus <- rowSums(xdf[,1:3])
View(xdf)
xdf$consensus <- (rowSums(xdf[,1:3])/3)
View(xdf)
View(xdf)
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
consesus
rerank <- rank(consesus)
rerank
consesus <- as.vector(xdf$consensus[1:500]) # extract consesus
names(consesus) <- row.names(xdf) # assign names
names(consesus) <- row.names(xdf[1:500,]) # assign names
consesus <- as.vector(xdf$consensus[1:500,]) # extract consesus
names(consesus) <- row.names(xdf[1:500,]) # assign names
rerank <- rank(consesus)
rerank
# number of genes to be extracted
geneNo <- 500
consesus <- as.vector(xdf$consensus[1:geneNo,]) # extract consesus
names(consesus) <- row.names(xdf[1:geneNo,]) # assign names
rerank <- rank(consesus)
rerank
# number of genes to be extracted
geneNo <- 200
consesus <- as.vector(xdf$consensus[1:geneNo,]) # extract consesus
names(consesus) <- row.names(xdf[1:geneNo,]) # assign names
rerank <- rank(consesus)
rerank
# number of genes to be extracted
geneNo <- 200
consesus <- as.vector(xdf$consensus[1:geneNo,]) # extract consesus
# produce consesus
xdf$consensus <- (rowSums(xdf[,1:3])/3)
# number of genes to be extracted
geneNo <- 200
consesus <- as.vector(xdf$consensus[1:geneNo,]) # extract consesus
names(consesus) <- row.names(xdf[1:geneNo,]) # assign names
consesus <- as.vector(xdf$consensus[1:500,]) # extract consesus
consesus <- as.vector(xdf$consensus)[1:geneNo,] # extract consesus
consesus <- as.vector(xdf[1:geneNo,]$consensus) # extract consesus
names(consesus) <- row.names(xdf[1:geneNo,]) # assign names
rerank <- rank(consesus)
rerank
rerank
xdf <- as.data.frame(cbind(x1_ranked, x2_ranked, x3_ranked, rerank))
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
# produce consesus
xdf$consensus <- (rowSums(xdf[,1:3])/3)
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
rerank <- rank(consesus)
rerank
xdf <- as.data.frame(cbind(x1_ranked, x2_ranked, x3_ranked, rerank))
# rebind the rankings + FDR for each package + consesus and then return -> actually meaningful results.
head(xdf)
rerank
# rebind the rankings + FDR for each package + consesus and then return -> actually meaningful results.
head(xdf)
?cbind
rerank
head(rerank)
# rebind the rankings + FDR for each package + consesus and then return -> actually meaningful results.
head(xdf)
head(rerank)
# rebind the rankings + FDR for each package + consesus and then return -> actually meaningful results.
head(xdf)
# p.adj vectors
as.vector(edgeR_data$FDR)
# p.adj vectors
edgeR_padj <- as.vector(edgeR_data$FDR)
edgeR_data
names(edgeR_padj) <- edgeR_data$X
edgeR_padj
DESeq_padj <- as.vector(DESeq_data$FDR)
names(DESeq_padj) <- DESeq_data$X
head(DESeq())
head(DESeq_data
head(DESeq_data)
head(DESeq_data)
head(DESeq_padj)
edgeR_padj <- as.vector(edgeR_data$FDR)
names(edgeR_padj) <- edgeR_data$X
limma_padj <- as.vector(limma_data$FDR)
names(limma_padj) <- limma_data$X
# rebind
xdf <- as.data.frame(cbind(x1_ranked, edgeR_padj,
x2_ranked, limma_padj,
x3_ranked, DESeq_padj,
rerank))
View(xdf)
a[match(names(x1_ranked), names(edgeR_padj))] <- b
rerank[match(names(x1_ranked), names(edgeR_padj))]
m <- rerank[match(names(x1_ranked), names(edgeR_padj))]
head(m)
tail(m)
# Load the data
edgeR_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_EdgeR_deResults.csv")
limma_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_limma_deResults.csv")
DESeq_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_DESeq2_deResults.csv")
# order the data according to most significant
edgeR_ord <- edgeR_data[order(edgeR_data$FDR), ]
limma_ord <- limma_data[order(limma_data$FDR), ]
DESeq_ord <- DESeq_data[order(DESeq_data$FDR), ]
x1 <- as.vector(edgeR_ord$FDR) # extract FDR
names(x1) <- edgeR_ord$X # assign names
x1_ranked <- rank(x1) # produce ranks
x2 <- as.vector(limma_ord$FDR)
names(x2) <- limma_ord$X
x2_ranked <- rank(x2)
x3 <- as.vector(DESeq_ord$FDR)
names(x3) <- DESeq_ord$X
x3_ranked <- rank(x3)
head(x1_ranked)
head(x2_ranked)
head(x3_ranked)
head(x1_ranked)
head(x2_ranked)
head(x3_ranked)
head(x1_ranked)
head(x2_ranked)
head(x3_ranked)
head(x1_ranked)
head(x2_ranked)
head(x3_ranked)
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
head(xdf)
head(x1_ranked, n = 20)
head(x2_ranked, n = 20)
head(x3_ranked, n = 20)
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
head(xdf, n = 20)
head(x1_ranked, n = 50)
head(x2_ranked, n = 50)
head(x3_ranked, n = 50)
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
head(xdf, n = 50)
head(x3_ranked, n = 100)
x1_ranked <- x1_ranked[order(names((x1_ranked))]
x1_ranked <- order(names((x1_ranked)
)
)
x1_ranked <- order(names((x1_ranked)))
x1_ranked <- order(names((x1_ranked)))
head(x1_ranked)
x1_ranked <- rank(x1) # produce ranks
x1_ranked <- order(names((x1_ranked)))
x1_ranked <- rank(x1) # produce ranks
x1_ranked <- order(names((x1_ranked)))
x1_ranked <- rank(x1) # produce ranks
x1_ranked
x1_ranked <- x1_ranked[order(names((x1_ranked)))]
x1_ranked
x1 <- as.vector(edgeR_ord$FDR) # extract FDR
names(x1) <- edgeR_ord$X # assign names
x1_ranked <- rank(x1) # produce ranks
x1_ranked <- x1_ranked[order(names((x1_ranked)))]
x1_ranked
x2 <- as.vector(limma_ord$FDR)
names(x2) <- limma_ord$X
x2_ranked <- rank(x2)
x2_ranked <- x2_ranked[order(names((x2_ranked)))]
x3 <- as.vector(DESeq_ord$FDR)
names(x3) <- DESeq_ord$X
x3_ranked <- rank(x3)
x3_ranked <- x3_ranked[order(names((x3_ranked)))]
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
head(xdf, n = 50)
# produce consesus
xdf$consensus <- (rowSums(xdf[,1:3])/3)
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
consesus
rerank <- rank(consesus)
rerank
head(rerank)
# p.adj vectors
edgeR_padj <- as.vector(edgeR_data$FDR)
names(edgeR_padj) <- edgeR_data$X
limma_padj <- as.vector(limma_data$FDR)
names(limma_padj) <- limma_data$X
DESeq_padj <- as.vector(DESeq_data$FDR)
names(DESeq_padj) <- DESeq_data$X
# p.adj vectors
edgeR_padj <- as.vector(edgeR_data$FDR)
names(edgeR_padj) <- edgeR_data$X
edgeR_padj <- edgeR_padj[order(names((edgeR_padj)))]
limma_padj <- as.vector(limma_data$FDR)
names(limma_padj) <- limma_data$X
limma_padj <- limma_padj[order(names((limma_padj)))]
DESeq_padj <- as.vector(DESeq_data$FDR)
names(DESeq_padj) <- DESeq_data$X
DESeq_padj <- DESeq_padj[order(names((DESeq_padj)))]
match()
xdf <- as.data.frame(cbind(x1_ranked, edgeR_padj,
x2_ranked, limma_padj,
x3_ranked, DESeq_padj,
rerank))
# rebind the rankings + FDR for each package + consesus and then return -> actually meaningful results.
head(xdf)
xdf <- xdf[order(xdf$rerank),]
head(xdf)
colnames(xdf) <- c("edgeR Rank", "edgeR adj.p",
"limma Rank", "limma adj.p",
"DESeq2 Rank", "DESeq2 adj.p",
"Ranking Consesus")
head(xdf)
rerank <- rank(consesus)
# Load the data
edgeR_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_EdgeR_deResults.csv")
limma_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_limma_deResults.csv")
DESeq_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_DESeq2_deResults.csv")
# order the data according to most significant
edgeR_ord <- edgeR_data[order(edgeR_data$FDR), ]
limma_ord <- limma_data[order(limma_data$FDR), ]
DESeq_ord <- DESeq_data[order(DESeq_data$FDR), ]
x1 <- as.vector(edgeR_ord$FDR) # extract FDR
names(x1) <- edgeR_ord$X # assign names
x1_ranked <- rank(x1) # produce ranks
x1_ranked <- x1_ranked[order(names((x1_ranked)))]
x2 <- as.vector(limma_ord$FDR)
names(x2) <- limma_ord$X
x2_ranked <- rank(x2)
x2_ranked <- x2_ranked[order(names((x2_ranked)))]
x3 <- as.vector(DESeq_ord$FDR)
names(x3) <- DESeq_ord$X
x3_ranked <- rank(x3)
x3_ranked <- x3_ranked[order(names((x3_ranked)))]
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
head(xdf, n = 50)
# produce consesus
xdf$consensus <- (rowSums(xdf[,1:3])/3)
# number of genes to be extracted
#geneNo <- 200
#consesus <- as.vector(xdf[1:geneNo,]$consensus) # extract consesus
#names(consesus) <- row.names(xdf[1:geneNo,]) # assign names
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
consesus
rerank <- rank(consesus)
rerank <- rerank[order(names((rerank)))]
# p.adj vectors
edgeR_padj <- as.vector(edgeR_data$FDR)
names(edgeR_padj) <- edgeR_data$X
edgeR_padj <- edgeR_padj[order(names((edgeR_padj)))]
limma_padj <- as.vector(limma_data$FDR)
names(limma_padj) <- limma_data$X
limma_padj <- limma_padj[order(names((limma_padj)))]
DESeq_padj <- as.vector(DESeq_data$FDR)
names(DESeq_padj) <- DESeq_data$X
DESeq_padj <- DESeq_padj[order(names((DESeq_padj)))]
# rebind the rankings + FDR for each package + consesus
xdf <- as.data.frame(cbind(x1_ranked, edgeR_padj,
x2_ranked, limma_padj,
x3_ranked, DESeq_padj,
rerank))
xdf <- xdf[order(xdf$rerank),]
colnames(xdf) <- c("edgeR Rank", "edgeR adj.p",
"limma Rank", "limma adj.p",
"DESeq2 Rank", "DESeq2 adj.p",
"Ranking Consesus")
head(xdf)
# Load the data
edgeR_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_EdgeR_deResults.csv")
limma_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_limma_deResults.csv")
DESeq_data <- read.csv("C:/Report/simulated_results/simul_3r_2e_DESeq2_deResults.csv")
rankConsesus <- function(x1_data, x2_data, x3_data, pipeline){
# order the data according to most significant
edgeR_ord <- x1_data[order(x1_data$FDR), ]
limma_ord <- x2_data[order(x2_data$FDR), ]
DESeq_ord <- x3_data[order(x3_data$FDR), ]
x1 <- as.vector(edgeR_ord$FDR) # extract FDR
names(x1) <- edgeR_ord$X # assign names
x1_ranked <- rank(x1) # produce ranks
x1_ranked <- x1_ranked[order(names((x1_ranked)))]
x2 <- as.vector(limma_ord$FDR)
names(x2) <- limma_ord$X
x2_ranked <- rank(x2)
x2_ranked <- x2_ranked[order(names((x2_ranked)))]
x3 <- as.vector(DESeq_ord$FDR)
names(x3) <- DESeq_ord$X
x3_ranked <- rank(x3)
x3_ranked <- x3_ranked[order(names((x3_ranked)))]
# combine the vectors into a
xdf <- as.data.frame((cbind(x1_ranked,x2_ranked,x3_ranked)))
# produce consesus
xdf$consensus <- (rowSums(xdf[,1:3])/3)
consesus <- as.vector(xdf$consensus) # extract consesus
names(consesus) <- row.names(xdf) # assign names
consesus
rerank <- rank(consesus)
rerank <- rerank[order(names((rerank)))]
# p.adj vectors
edgeR_padj <- as.vector(x1_data$FDR)
names(edgeR_padj) <- x1_data$X
edgeR_padj <- edgeR_padj[order(names((edgeR_padj)))]
limma_padj <- as.vector(x2_data$FDR)
names(limma_padj) <- x2_data$X
limma_padj <- limma_padj[order(names((limma_padj)))]
DESeq_padj <- as.vector(x3_data$FDR)
names(DESeq_padj) <- x3_data$X
DESeq_padj <- DESeq_padj[order(names((DESeq_padj)))]
# rebind the rankings + FDR for each package + consesus
xdf <- as.data.frame(cbind(x1_ranked, edgeR_padj,
x2_ranked, limma_padj,
x3_ranked, DESeq_padj,
rerank))
xdf <- xdf[order(xdf$rerank),]
if(pipeline == 2){
colnames(xdf) <- c("edgeR Rank", "edgeR adj.p",
"limma Rank", "limma adj.p",
"DESeq2 Rank", "DESeq2 adj.p",
"Ranking Consesus")
} else {
colnames(xdf) <- c("T-test Rank", "T-test adj.p",
"Wilcoxon Rank", "Wilcoxon adj.p",
"MAST Rank", "MAST adj.p",
"Ranking Consesus")
}
return(xdf)
}
y <- rankConsesus(edgeR_data, limma_data, DESeq_data)
y <- rankConsesus(edgeR_data, limma_data, DESeq_data, 2)
View(y)
y <- rankConsesus(edgeR_data, limma_data, DESeq_data, 1)
View(y)
library(BingleSeq)
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
l <- list(edgeR_data, limma_data, DESeq_data)
y <- rankConsesus(l[[2]], limma_data[[3]], DESeq_data[[1]], 2)
l <- list(DESeq_data ,edgeR_data, limma_data)
y <- rankConsesus(l[[2]], limma_data[[3]], DESeq_data[[1]], 2)
y <- rankConsesus(l[[2]], l[[3]], l[[1]], 2)
rm(y)
y <- rankConsesus(l[[2]], l[[3]], l[[1]], 2)
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
startBingleSeq()
library(BingleSeq)
startBingleSeq()
startBingleSeq()
startBingleSeq()
library(BingleSeq)
startBingleSeq()
startBingleSeq()
devtools::load_all(".")
startBingleSeq()
library(BingleSeq)
startBingleSeq()
startBingleSeq()
startBingleSeq()
